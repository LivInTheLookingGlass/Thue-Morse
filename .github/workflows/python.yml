name: Python tests

on:
  push:
    paths:
    - 'dev/**'
    - '.github/workflows/python.yml'
  schedule:
  - cron: "0 0 1 * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Use Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Fetch test dependencies
      run: python -O -m pip install -r requirements.txt

    - name: Run Linters
      run: python -O -m pytest --isort --flake8 --mypy --mypy-ignore-missing-imports -k "not test_compare"

  base_2:
    strategy:
      fail-fast: false
      matrix:
        def:
        - 2_02
        - 2_03
        - 2_04
        - 2_05
        - 2_06
        - 2_07
        - 2_08
        - 2_09
        - 2_10
        - 2_11
        - 2_12
        - 2_13
        - 2_14
        - 2_15
        - n_01
        - n_02
        - n_03
        - n_04
        - n_05
        - n_06
        - n_07
    runs-on: ubuntu-latest
    name: Test ${{matrix.def}} in base 2
    steps:
    - uses: actions/checkout@v4

    - name: Use Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Fetch test dependencies
      run: python -O -m pip install -r requirements.txt

    - name: Run tests (${{matrix.def}})
      run: |
        ulimit -S -v 15728640; ulimit -H -v; ulimit -S -v
        ulimit -S -m 15728640; ulimit -H -m; ulimit -S -m
        case ${{matrix.def}} in
          2_02)
            test_len=35
            ;;
          2_0[379]|2_1[012])
            test_len=34
            ;;
          n_0[12]|2_04)
            test_len=33
            ;;
          n_0[346]|2_0[56])
            test_len=32
            ;;
          n_07)
            test_len=31
            ;;
          n_05|2_14)
            test_len=29
            ;;
          2_08)
            test_len=26
            ;;
          2_1[35])
            test_len=15
            ;;
          *)
            echo "Unknown definition; limit not set"
            exit -1
            ;;
        esac
        sed -i "s/^test_len = .*/test_len = 2**$test_len/" dev/test_seq.py
        echo "Testing up to 2^$test_len"

        source .mem_mon.sh
        monitor_memory &
        monitor_pid=$!

        python -O -m pytest -k "${{matrix.def}}" --timeout=21555

        kill $monitor_pid

  base_n:
    strategy:
      fail-fast: false
      matrix:
        bases: 
        - 003-016
        - 017-032
        - 033-048
        - 049-064
        - 065-080
        - 081-096
        - 097-112
        - 113-128
        - 129-144
        - 145-160
        - 161-176
        - 177-192
        - 193-208
        - 209-224
        - 225-240
        - 241-256
        def: [2, 3, 4, 5, 6, 7]

    runs-on: ubuntu-latest
    needs: lint
    name: Test n_0${{matrix.def}} in bases ${{matrix.bases}}

    steps:
    - uses: actions/checkout@v4

    - name: Use Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Fetch test dependencies
      run: python -O -m pip install -r requirements.txt

    - name: Run tests (${{matrix.def}} ${{matrix.bases}})
      run: |
        ulimit -S -v 15728640; ulimit -H -v; ulimit -S -v
        ulimit -S -m 15728640; ulimit -H -m; ulimit -S -m
        case ${{matrix.def}}-${{matrix.bases}} in
          5-193*|5-209*|5-225*|5-241*)
            test_len=23
            ;;
          3-209*|3-225*|3-241*)
            test_len=24
            ;;
          [67]-*)
            test_len=26
            ;;
          [234]-*)
            test_len=25
            ;;
          5-*)
            test_len=24
            ;;
          *)
            echo "Unknown definition; limit not set"
            exit -1
            ;;
        esac
        IFS='-' read -r start stop <<< "${{matrix.bases}}"
        bases=()
        for (( i=start; i<=stop; i++ )); do
            bases+=("$i")
        done
        base_regex=""
        for (( i=start; i<=stop; i++ )); do
            # Format base as base_XX (ensure it's two digits)
            formatted_base=$(printf "%03d" "$i")
            base_regex+="base_${formatted_base} or "
        done
        base_regex="${base_regex% or }"
        echo "Testing up to 2^$test_len"
        sed -i "s/^test_len = .*/test_len = 2**$test_len/" dev/test_seq.py
        echo $base_regex

        source .mem_mon.sh
        monitor_memory &
        monitor_pid=$!

        python -O -m pytest -k "${{matrix.def}}- and ($base_regex)"

        kill $monitor_pid
