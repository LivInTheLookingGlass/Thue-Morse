name: Python tests

on:
  push:
    paths:
    - 'code/**'
    - '.github/workflows/python.yml'
  schedule:
  - cron: "0 0 1 * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python:
    strategy:
      fail-fast: false
      matrix:
        selection:
        - lint
        - base_2
        - base_2_12
        - base_n_3_8
        - base_n_9_16
        - base_n_17_24
        - base_n_25_32
        - base_n_33_40
        - base_n_41_48
        - base_n_49_56
        - base_n_57_64
        - base_n_65_72
        - base_n_73_80
        - base_n_81_88
        - base_n_89_96
        - base_n_97_104
        - base_n_105_112
        - base_n_113_120
        - base_n_121_128
        - base_n_129_136
        - base_n_137_144
        - base_n_145_152
        - base_n_153_160
        - base_n_161_168
        - base_n_169_176
        - base_n_177_184
        - base_n_185_192
        - base_n_193_200
        - base_n_201_208
        - base_n_209_216
        - base_n_217_224
        - base_n_225_232
        - base_n_233_240
        - base_n_241_248
        - base_n_249_255
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Fetch test dependencies
      run: python -m pip install -r requirements.txt

    - name: Run tests (in parallel, ${{matrix.selection}})
      run: |
        case ${{matrix.selection}} in
          lint)
            python -m pytest --isort --flake8 --mypy --mypy-ignore-missing-imports -k "not test_compare"
            ;;
          base_2)
            test_len=27
            echo "Testing up to 2^$test_len"
            sed -i "s/^test_len = .*/test_len = 2**$test_len/" code/test_seq.py
            python -m pytest -k "test_compare_2_1 and not 2_12" -n auto --dist=worksteal
            ;;
          base_2_12)
            test_len=17
            echo "Testing up to 2^$test_len"
            sed -i "s/^test_len = .*/test_len = 2**$test_len/" code/test_seq.py
            python -m pytest -k "2_12" --timeout=21585
            ;;
          *)
            IFS='_' read -r prefix1 prefix2 start stop <<< "${{matrix.selection}}"
            bases=()
            for (( i=start; i<=stop; i++ )); do
                bases+=("$i")
            done
            base_regex=""
            for (( i=start; i<=stop; i++ )); do
                # Format base as base_XX (ensure it's two digits)
                formatted_base=$(printf "%02d" "$i")
                base_regex+="base_${formatted_base} or "
            done
            base_regex="${base_regex% or }"
            pytest_regex="test_compare_n_1_to_n and ($base_regex)"
            echo $pytest_regex
            if [ $start -le 8 ]; then
              test_len=27
            elif [ $start -le 16 ]; then
              test_len=26
            elif [ $start -le 40 ]; then
              test_len=25
            elif [ $start -le 56 ]; then
              test_len=26
            elif [ $start -le 64 ]; then
              test_len=25
            else
              test_len=24
            fi
            echo "Testing up to 2^$test_len"
            sed -i "s/^test_len = .*/test_len = 2**$test_len/" code/test_seq.py
            python -m pytest -k "$pytest_regex" -n auto --dist=worksteal
            ;;
        esac
