% Define predicates for negative and non-negative integers
neg_int(x) :- exists(k, k > 0 & x = -k).
nonneg_int(x) :- x = 0 | exists(k, k > 0 & x = k).

% Define mod(x, n) recursively
mod(0, n) = 0.

% Base case for non-negative x
nonneg_int(x) & (x < n) -> 
    mod(x, n) = x.

% Case for negative x
neg_int(x) & (n >= 2) -> 
    mod(x, n) = mod(x + n, n).

% Recursive case for non-negative x greater than or equal to n
nonneg_int(x) & (x >= n) -> 
    mod(x, n) = mod(x - n, n).

% Define XOR recursively
xor(0, 0) = 0.
xor(0, 1) = 1.
xor(1, 0) = 1.
xor(1, 1) = 0.

% Recursive case for larger integers
nonneg_int(a) & nonneg_int(b) & (a > 1) & (b > 1) -> 
    xor(a, b) = xor(a - 1, b - 1) if (mod(a, 2) = 1) & (mod(b, 2) = 1) 
    else xor(a - 1, b) + xor(a, b - 1).

