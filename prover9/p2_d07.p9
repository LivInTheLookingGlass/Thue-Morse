% Predicate to determine if a number has an odd number of 1's in its binary representation
count_ones(0, 0).  % Base case: 0 has 0 ones.

count_ones(x, c) :- 
    x > 0 & count_ones(x // 2, c1) & (x mod 2 = 1 -> c = c1 + 1 ; c = c1).

% Define the Odious numbers
Odious(n, x) :- 
    nonneg_int(n) & nonneg_int(x) & count_ones(x, c) & (c mod 2 = 1) & 
    count_ones(n, k) & (x < n + k).

% Define a predicate to get the n-th Odious number
get_odious(n, x) :- 
    nonneg_int(n) & nonneg_int(x) & Odious(n, x).

% Define T_{2,7}(n)
nonneg_int(n) -> 
    T_2_7(n) = mod(get_odious(n, x) + 1, 2).
